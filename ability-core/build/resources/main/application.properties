spring.datasource.url=jdbc:postgresql://localhost:5433/backend
spring.datasource.username=back
spring.datasource.password=back
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate

spring.flyway.enabled=true

# employee commands
commands.send.message.by.email.name=SEND_MESSAGE_BY_EMAIL
commands.send.message.by.role.name=SEND_MESSAGE_BY_ROLE
commands.accept.product.request.name=ACCEPT_PRODUCT_REQUEST
commands.cancel.product.request.name=CANCEL_PRODUCT_REQUEST

# client commands
commands.get.product.info.name=GET_PRODUCT_INFO
commands.send.product.request.name=SEND_PRODUCT_REQUEST
commands.view.product.requests.name=VIEW_PRODUCT_REQUESTS
commands.get.command.info.name=HELP_COMMAND
commands.create.name=CREATE_COMMAND
commands.start.name=START_COMMAND

# admin commands
commands.block.user.name=BLOCK_USER
commands.unblock.user.name=UNBLOCK_USER
commands.change.user.role.name=CHANGE_ROLE

# description arg command
commands.get.command.info.description.arg=Please, enter the name command, example </start>
commands.get.context.description.arg=Please, enter email, example <example@mail.ru>
commands.get.send.message.by.email.description.arg=Please, enter list email message, example <example@mail.ru...>, <message>
commands.get.send.message.by.role.description.arg=Please, enter role and message, example <name_role>, <message>
commands.get.product.name-count.product.description.arg=Please, enter product name and count, example <name_product>, <count>
commands.get.product.name.description.arg=Please, enter product name, example <name_product>
commands.get.change.role.description.arg=Please, enter role, example <new_role>
commands.get.create.code.description.arg=Please, enter code from email, example <code_verification>

api.mail.properties.mail.smtp.auth=true
api.mail.properties.mail.smtp.ssl.enable=true
api.mail.protocol=smtp
api.mail.debug=smtps
api.mail.host=smtp.mail.ru
api.mail.port=587
api.mail.username=mikhalevmakar@mail.ru
api.mail.password=VAmE7Kk1ZsQSuwMceRYp

spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=back
api.data.redis.duration-sec=180
api.security.generate-code.strength=6
api.security.generate-code.duration-number-min=100000
api.security.generate-code.duration-number-max=999999

api.tg.message.code-confirmation=Code confirmation:
api.tg.message.failed.confirmation-code=Verification code error
api.tg.message.successfully.confirmation-code=User successfully registration

telegram.bot.api.messages.start=Click on button to start
telegram.bot.api.messages.roles=Please, select your role:
telegram.bot.api.messages.select-command=Please, select command:
telegram.bot.api.messages.enter-email=Please, enter your email address:
telegram.bot.api.messages.code-generation=Check your email and enter verification code:
telegram.bot.api.messages.successful-authorization=Successful authorization! Please, send any message

telegram.bot.api.commands.start=START_COMMAND
telegram.bot.api.commands.create=CREATE_COMMAND
telegram.bot.api.commands.roles=ROLES_COMMAND
telegram.bot.api.commands.client=CLIENT
telegram.bot.api.commands.employee=EMPLOYEE
telegram.bot.api.commands.admin=ADMIN

# admin commands
telegram.bot.api.commands.block-user=BLOCK_USER
telegram.bot.api.commands.unblock-user=UNBLOCK_USER
telegram.bot.api.commands.change-role=CHANGE_ROLE

# client commands
telegram.bot.api.commands.get-product-info=GET_PRODUCT_INFO
telegram.bot.api.commands.view-product-requests=VIEW_PRODUCT_REQUESTS
telegram.bot.api.commands.send-product-request=SEND_PRODUCT_REQUEST
telegram.bot.api.commands.help=HELP_COMMAND

# employee commands
telegram.bot.api.commands.send-message-by-role=SEND_MESSAGE_BY_ROLE
telegram.bot.api.commands.send-message-by-email=SEND_MESSAGE_BY_EMAIL
telegram.bot.api.commands.cancel-product-request=CANCEL_PRODUCT_REQUEST
telegram.bot.api.commands.accept-product-request=ACCEPT_PRODUCT_REQUEST

telegram.bot.api.token=${BOT_KEY}
telegram.bot.api.username=${BOT_USERNAME}

# message response tg from controller
api.mail.status.response.successful=Successful to mail message
api.mail.status.response.failed=Failed to mail message
api.context.status.response.block-user=You are blocked because you have exhausted all attempts 
api.context.status.response.successful-send-code=Confirmation password has been sent to your email, please enter the code:
api.product.status.response.successful-accept=Successful accept product
api.product.status.response.successful-cancel=Successful cancel product
api.product.status.response.successful-request=Successful product request
api.user.status.response.unblock=Successful unblock user
api.user.status.response.block=Successful block user
api.user.status.response.change-role=Successful change-role